# # This workflow build and push a Docker container to Google Artifact Registry and deploy it on Cloud Run when a commit is pushed to the "main" branch
# #
# # Overview:
# #
# # 1. Authenticate to Google Cloud
# # 2. Authenticate Docker to Artifact Registry
# # 3. Build a docker container
# # 4. Publish it to Google Artifact Registry
# # 5. Deploy it to Cloud Run
# #
# # To configure this workflow:
# #
# # 1. Ensure the required Google Cloud APIs are enabled:
# #
# #    Cloud Run            run.googleapis.com
# #    Artifact Registry    artifactregistry.googleapis.com
# #
# # 2. Create and configure Workload Identity Federation for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation)
# #
# # 3. Ensure the required IAM permissions are granted
# #
# #    Cloud Run
# #      roles/run.admin
# #      roles/iam.serviceAccountUser     (to act as the Cloud Run runtime service account)
# #
# #    Artifact Registry
# #      roles/artifactregistry.admin     (project or repository level)
# #
# #    NOTE: You should always follow the principle of least privilege when assigning IAM roles
# #
# # 4. Create GitHub secrets for WIF_PROVIDER and WIF_SERVICE_ACCOUNT
# #
# # 5. Change the values for the GAR_LOCATION, SERVICE and REGION environment variables (below).
# #
# # NOTE: To use Google Container Registry instead, replace ${{ env.GAR_LOCATION }}-docker.pkg.dev with gcr.io
# #
# # For more support on how to run this workflow, please visit https://github.com/marketplace/actions/deploy-to-cloud-run
# #
# # Further reading:
# #   Cloud Run IAM permissions                 - https://cloud.google.com/run/docs/deploying
# #   Artifact Registry IAM permissions         - https://cloud.google.com/artifact-registry/docs/access-control#roles
# #   Container Registry vs Artifact Registry   - https://cloud.google.com/blog/products/application-development/understanding-artifact-registry-vs-container-registry
# #   Principle of least privilege              - https://cloud.google.com/blog/products/identity-security/dont-get-pwned-practicing-the-principle-of-least-privilege

# name: Build and Deploy to Cloud Run

# on:
#   push:
#     branches:
#       - "main"

# env:
#   PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }} # TODO: update Google Cloud project id
#   #GAR_LOCATION: YOUR_GAR_LOCATION # TODO: update Artifact Registry location
#   SERVICE: blog # TODO: update Cloud Run service name
#   REGION: asia-east1 # TODO: update Cloud Run service region

# jobs:
#   deploy:
#     # Add 'id-token' with the intended permissions for workload identity federation
#     permissions:
#       contents: "read"
#       id-token: "write"

#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v2

#       # - name: Google Auth
#       #   id: auth
#       #   uses: 'google-github-actions/auth@v0'
#       #   with:
#       #     token_format: 'access_token'
#       #     workload_identity_provider: '${{ secrets.WIF_PROVIDER }}' # e.g. - projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider
#       #     service_account: '${{ secrets.WIF_SERVICE_ACCOUNT }}' # e.g. - my-service-account@my-project.iam.gserviceaccount.com

#       # NOTE: Alternative option - authentication via credentials json
#       - name: Google Auth
#         id: auth
#         uses: "google-github-actions/auth@v0"
#         with:
#           credentials_json: "${{ secrets.GCP_CREDENTIALS }}"

#       # BEGIN - Docker auth and build (NOTE: If you already have a container image, these Docker steps can be omitted)

#       # Authenticate Docker to Google Cloud Artifact Registry
#       # - name: Docker Auth
#       #   id: docker-auth
#       #   uses: 'docker/login-action@v1'
#       #   with:
#       #     username: 'oauth2accesstoken'
#       #     password: '${{ steps.auth.outputs.access_token }}'
#       #     registry: '${{ env.GAR_LOCATION }}-docker.pkg.dev'

#       #   docker build -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}:${{ github.sha }}" ./
#       #   docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}:${{ github.sha }}"
#       - name: Build and Push Container
#         run: |-

#           docker build -t asia.gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE }}:${{  github.sha }} ./
#           docker push asia.gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE }}:${{  github.sha }}

#       # END - Docker auth and build

#       - name: Deploy to Cloud Run
#         run: |-
#           gcloud run deploy ${{ env.SERVICE }} \
#             --region ${{ env.REGION }} \
#             --image asia.gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE }}:${{  github.sha }} \
#             --platform "managed" \
#             --allow-unauthenticated \
#             --quiet

#       # - name: Deploy to Cloud Run
#       #   id: deploy
#       #   uses: google-github-actions/deploy-cloudrun@v0
#       #   with:
#       #     service: ${{ env.SERVICE }}
#       #     region: ${{ env.REGION }}
#       #     # NOTE: If using a pre-built image, update the image name here
#       #     image: asia.gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE }}:${{  github.sha }}

#       # If required, use the Cloud Run url output in later steps
#       # - name: Show Output
#       #   run: echo ${{ steps.deploy.outputs.url }}

name: Build and Deploy to Cloud Run

on:
  push:
    branches:
      - master

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: create-react-app
  RUN_REGION: us-central1

jobs:
  setup-build-deploy:
    name: Setup, Build, and Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Checkout submodules
        uses: wlcharlie/Notes@main
        with:
          remote: true

      # Setup gcloud CLI
      - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          version: "286.0.0"
          service_account_email: ${{ secrets.GCP_SA_EMAIL }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          export_default_credentials: true

      # Print gcloud info
      - name: Info
        run: gcloud info

      # Build and push image to Google Container Registry
      - name: Build
        run: |-
          gcloud builds submit \
            --quiet \
            --tag "gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA"
      # Deploy image to Cloud Run
      - name: Deploy
        run: |-
          gcloud run deploy "$SERVICE_NAME" \
            --quiet \
            --region "$RUN_REGION" \
            --image "gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA" \
            --platform "managed" \
            --port 80 \
            --allow-unauthenticated
